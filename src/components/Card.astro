---
interface Props {
	number: string;
}

const { number } = Astro.props;
---
<christmas-card class="card" id={number}>
	<h2>
		{number}
	</h2>
</christmas-card>

<script>
  class CardFlip extends HTMLElement {
	constructor() {
	  super();

	  this.addEventListener('click', () => {
		trackClickedItem(this);
	  });

	function trackClickedItem(card) {
		card.classList.add('opened');
		const cardID = card.id;
		const clickedCards = JSON.parse(localStorage.getItem('clickedCards')) || [];
		clickedCards.push(cardID);
		localStorage.setItem('clickedCards', JSON.stringify(clickedCards));
	}
		
	  // Function to check if a card is clicked and apply CSS class
		function rememberClickedCards() {
			const clickedCards = JSON.parse(localStorage.getItem('clickedCards'));

			clickedCards.forEach((card) => {
				const cardElement = document.getElementById(card);
				
				if (cardElement && !cardElement.classList.contains('opened')) {
					cardElement.classList.add('opened');
				}
			});

		
		}

		// Call the function when the page loads
		document.addEventListener('DOMContentLoaded', rememberClickedCards);
	}
  }
    customElements.define('christmas-card', CardFlip);
</script>

<style>
	.card {
		border: 2px dashed #fff;
		border-radius: 4px;
		display: block;	
		aspect-ratio: 1/1;
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 1;
	}

	.card.opened {
		background-color: red;
	}

	h2 {
		color: #fff;
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
</style>
